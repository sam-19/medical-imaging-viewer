/** MEDIGI VIEWER STUDY LOADER
 * Checks the types of given studies and laod them accordingly.
 * @package    medigi-viewer
 * @copyright  2020-2021 Sampsa Lohi
 * @license    MIT
 */

import dicomParser from 'dicom-parser'
import { FileSystemItem, StudyLoader, StudyObject } from '../../types/assets'
const CONFIG_FILE_NAME = 'medigi_study_config.json'

class GeneralStudyLoader implements StudyLoader {
    private getStudyObjectTemplate (): StudyObject {
        return {
            files: [] as File[],
            format: '',
            meta: {},
            name: '',
            scope: '',
            type: '',
            version: '1.0'
        }
    }
    /**
     * Load study properties from a single file.
     * @param file
     * @param name optional default study name.
     * @param config optional study configuration.
     * @return a promise containing the loaded study as StudyObject.
     */
    public async loadFromFile (file: File, config?: any): Promise<StudyObject> {
        let study = this.getStudyObjectTemplate()
        if (config) {
            study = Object.assign(study, config)
        } else {
            // Load file
        }
        return study
    }
    /**
     * Recurse a given FileSystemItem and load each contained study.
     * @param fileTree FileSystemItem generated by one of the file loaders.
     * @param config optional configuration detailing the contained studies.
     * @return a promise containing the loaded studies as { name: StudyObject }
     */
    public async loadFromFileSystem (fileTree: FileSystemItem, config: any = {}): Promise<any> {
        console.log(fileTree)
        const studies = {} as any
        if (fileTree) {
            let rootDir = fileTree
            while (!rootDir.files.length && rootDir.directories.length === 1) {
                // Recurse until we arrive at the root folder of the image sets
                rootDir = rootDir.directories[0]
            }
            // Check for possible config file in the root directory
            if (rootDir.files.length) {
                for (let i=0; i<rootDir.files.length; i++) {
                    console.log(rootDir.files[i].name, CONFIG_FILE_NAME)
                    if (rootDir.files[i].name === CONFIG_FILE_NAME) {
                        // Remove the config file from the directory
                        const confFile = rootDir.files.splice(i, 1)[0]
                        // Attempt to read config from the file
                        await new Promise((resolve, reject) => {
                            const reader = new FileReader()
                            reader.onloadend = (e: any) => {
                                const result = JSON.parse(e.target.result)
                                resolve(result)
                            }
                            reader.onerror = (e: any) => {
                                reject(e)
                            }
                            config = reader.readAsText(confFile.file as File)
                        }).then(json => {
                            config = Object.assign(json, config)
                        }).catch(e => {
                            console.error(`Could not load config from ${confFile.path}:`)
                            console.error(e.message)
                        })
                        break
                    }
                }
            }
            // Make sure there is a studies property on config
            if (!config.hasOwnProperty('studies')) {
                config.studies = {}
            }
            // Next, check if this is a single file dir or several dirs
            if (!rootDir.directories.length && rootDir.files.length) {
                if (!rootDir.path) {
                    // If this is the "pseudo" root directory, add each file as a separate study
                    // (as they were dragged as separate files into the viewer)
                    for (let i=0; i<rootDir.files.length; i++) {
                        const curFile = rootDir.files[i]
                        const study = await this.loadFromFile(
                            (curFile.file as File),
                            Object.assign({ name: curFile.name }, config.studies[curFile.name])
                        )
                        studies[curFile.name] = study
                    }
                } else {
                    // Load the first file and add directory contents as study files and
                    // pass the directory name as default study name
                    const study = await this.loadFromFile(
                        (rootDir.files[0].file as File),
                        Object.assign({ name: rootDir.name }, config.studies[rootDir.name])
                    )
                    for (let i=0; i<rootDir.files.length; i++) {
                        study.files.push(rootDir.files[i].file as File)
                    }
                    studies[rootDir.name] = study
                }
            } else if (rootDir.directories.length) {
                // Try to add each individual dir as a separate study.
                // First check that each directory really contains only files, skip those that don't.
                for (let i=0; i<rootDir.directories.length; i++) {
                    const curDir = rootDir.directories[i]
                    if (curDir.directories.length) {
                        console.warn(`${curDir.path} was omitted because it contained subdirectories.`)
                        continue
                    } else if (!curDir.files.length) {
                        console.warn(`${curDir.path} was omitted because it was empty.`)
                        continue
                    } else {
                        // Add each directory as separate study
                        const curFile = rootDir.directories[i].files[0]
                        const study = await this.loadFromFile(
                            (curFile.file as File),
                            Object.assign(
                                { name: rootDir.directories[i].name },
                                config.studies[rootDir.directories[i].name]
                            )
                        )
                        for (let j=0; j<rootDir.directories[i].files.length; j++) {
                            study.files.push(rootDir.directories[i].files[j].file as File)
                        }
                        studies[rootDir.directories[i].name] = study
                    }
                }
            } else {
                console.warn("Dropped item had an empty root directory!")
            }
        }
        console.log(studies)
    }
}

export default GeneralStudyLoader
